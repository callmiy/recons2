// Generated by CoffeeScript 1.7.1
$(function() {
  var $amount, $amountText, $createBtn, $form, $lcNumber, $memo, $memoDeck, $nostro, $postBtn, $tbody, allRowsSelector, cleanUp, createUrl, csrfToken, defaultMemoUrl, displayLc, markPosted, memoAcct, nostroAcct, oneRowSelector, rowCheckersSelector;
  $(window).trigger('init-autocomplete');
  $form = $('#lc-cv-mvt-form');
  $amountText = $('#id_amount_text');
  $amount = $('#id_amount');
  $lcNumber = $('#id_lc_number');
  $memo = $('#id_memo_acct');
  createUrl = $form.data('create-url');
  csrfToken = $form.data('csrf');
  $tbody = $('tbody');
  $createBtn = $('#create');
  $postBtn = $('#post');
  rowCheckersSelector = 'tr>td>input';
  defaultMemoUrl = $('#default-memo-url').val();
  $memoDeck = $('#id_memo_acct_on_deck>div');
  $nostro = $('#id_acct').change(function(evt) {
    var ccy;
    ccy = /.+\|.+\|\s*([A-Z]{3})\s*\|/.exec($('#id_acct_on_deck>div').text())[1];
    return $.ajax({
      url: "" + defaultMemoUrl + "?ccy=" + ccy,
      type: 'GET',
      async: false,
      dataType: 'json',
      success: function(resp) {
        $memoDeck.text(resp.number);
        return $memo.val(resp.id);
      },
      error: function(resp) {
        return console.log(resp);
      }
    });
  });
  memoAcct = '';
  nostroAcct = '';
  oneRowSelector = 'td>input';
  allRowsSelector = 'th>input';
  $('table').checkOneAll(oneRowSelector, allRowsSelector);
  $tbody.on({
    'change': function(evt) {
      var $el, checked;
      $el = $(this);
      checked = Boolean($tbody.find("" + rowCheckersSelector + ":checked").size());
      $postBtn.prop('disabled', !checked);
      return $createBtn.prop('disabled', checked);
    }
  }, rowCheckersSelector);
  $amountText.on({
    'focusout': function(evt) {
      var $el, amt;
      $el = $(this);
      amt = kanmii.numberFormat($el.val());
      if (amt) {
        return $el.val(amt);
      }
    }
  });
  cleanUp = function() {
    var $nostroDeck;
    $nostroDeck = $('#id_acct_on_deck>div');
    nostroAcct = kanmii.strip($nostroDeck.text().replace('X ', ''));
    $nostroDeck.text('').children().remove();
    memoAcct = kanmii.strip($memoDeck.text().replace('X ', ''));
    $memoDeck.text('').children().remove();
    return $form.find('input').val('');
  };
  displayLc = function(data) {
    var $tr;
    $tr = $('<tr>', {
      id: "tr-" + data.id
    }).appendTo($tbody);
    $('<td>').appendTo($tr).append($('<input>', {
      type: 'checkbox'
    }), ('  ' + $tbody.children().size()).replace(/^\s+0/, '  '));
    $('<td>', {
      "class": 'lc-number',
      text: data.lc_number
    }).appendTo($tr);
    $('<td>', {
      "class": 'amount',
      text: kanmii.numberFormat(data.amount)
    }).appendTo($tr);
    $('<td>', {
      "class": 'nostro',
      text: nostroAcct
    }).appendTo($tr);
    return $('<td>', {
      "class": 'memo',
      text: memoAcct
    }).appendTo($tr).after($('<td>', {
      "class": 'post-status'
    }));
  };
  $createBtn.click(function(evt) {
    var amount;
    evt.preventDefault();
    amount = kanmii.formattedToNumber($amountText.val());
    if (amount) {
      $amount.val(amount);
    } else {
      return window.alert('Provide amount for movement.');
    }
    if (!$lcNumber.val()) {
      return window.alert('Provide LC Number');
    }
    if (!$nostro.val()) {
      return window.alert('Provide Nostro');
    }
    if (!$memo.val()) {
      return window.alert('Provide Memo account.');
    }
    return $.ajax(createUrl, {
      type: 'post',
      data: $form.serialize(),
      dataType: "json",
      headers: {
        'X-CSRFToken': csrfToken
      },
      success: function(resp) {
        cleanUp();
        return displayLc(resp);
      },
      error: function(resp) {
        return alert(resp.responseText || resp);
      }
    });
  });
  markPosted = function($rows, postStatus) {
    var $tr, id, status, _results;
    $rows.find(oneRowSelector).addClass('no-check').prop('checked', false).prop('disabled', true).trigger('change');
    _results = [];
    for (id in postStatus) {
      status = postStatus[id];
      $tr = $rows.filter("#tr-" + id);
      if (status) {
        _results.push($tr.addClass('posted').children('.post-status').text('Successful'));
      } else {
        _results.push($tr.addClass('unposted').children('.post-status').text('Failed'));
      }
    }
    return _results;
  };
  return $postBtn.click(function(evt) {
    var el, selectedRowIds, selectedRows;
    evt.preventDefault();
    selectedRows = $("" + rowCheckersSelector + ":checked").parents('tr');
    selectedRowIds = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = selectedRows.length; _i < _len; _i++) {
        el = selectedRows[_i];
        _results.push($(el).prop('id').replace('tr-', ''));
      }
      return _results;
    })();
    return $.ajax(window.location.pathname, {
      type: 'post',
      headers: {
        'X-CSRFToken': csrfToken
      },
      dataType: "json",
      contentType: 'application/json; charset=utf-8',
      data: JSON.stringify(selectedRowIds),
      success: function(resp) {
        if (kanmii.isObj(resp)) {
          return markPosted(selectedRows, resp);
        } else {
          return window.alert('Posting failed.');
        }
      },
      error: function(resp) {
        return alert(resp.responseText || resp);
      }
    });
  });
});
