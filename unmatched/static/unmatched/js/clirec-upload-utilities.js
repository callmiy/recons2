// Generated by CoffeeScript 1.7.1
var clirecUploadUtils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

clirecUploadUtils = {};

clirecUploadUtils.ParseData = (function() {
  var ParseData;
  ParseData = (function() {
    function ParseData(row) {
      var amount, postDate, valDate;
      postDate = this.dateParser(row[0]);
      valDate = this.dateParser(row[1]);
      amount = kanmii.formattedToNumber("" + row[4]);
      this.error = !Boolean(postDate && valDate && amount);
      this.data = {
        post_date: postDate,
        valdate: valDate,
        details: row[3],
        amount: String(amount)
      };
      this.appendLCRef(row[3]);
    }

    ParseData.prototype.appendLCRef = function(details) {
      var pattern, ref, ref_patterns, _i, _len, _results;
      ref_patterns = [/LCCB\/ZAK\/\d{2}\/\d{0,3}/i, /ILCL[A-Z]{3}\d{9}/i, /ITASAL\d+/i, /SWIFT\s+INV\s+\d+/i, /AA\d{7}/, /CFE\d{9}/i, /CFG\d{9}/i, /CFC\d{9}/i, /FCO\d{9}/i, /OTG\d{9}/i, /OTE\d{9}/i, /ITF\d+SBLC?/i, /ITAC\d+/i, /UNC\d+[A-Z]+/i, /FOBC\d{8}/i];
      _results = [];
      for (_i = 0, _len = ref_patterns.length; _i < _len; _i++) {
        pattern = ref_patterns[_i];
        ref = pattern.exec(details);
        if (ref) {
          this.data.lc_number = ref[0].toUpperCase();
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ParseData.prototype.dateParser = function(val) {
      var MMM_NAMES, day, mon, valDate, yr;
      MMM_NAMES = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
      valDate = /^([a-z]{3})[^a-z\d]+(\d{2})[^a-z\d]+(\d{4})$/i.exec(val);
      if (valDate) {
        mon = MMM_NAMES.indexOf(valDate[1].toLowerCase()) + 1;
        day = parseInt(valDate[2]);
        yr = parseInt(valDate[3]);
        return "" + yr + "-" + mon + "-" + day;
      }
      return null;
    };

    return ParseData;

  })();
  return ParseData;
})();

clirecUploadUtils.setPluginInitialVal = function(attrs) {
  var $el, id, opts, text;
  $el = attrs.$el, text = attrs.text, id = attrs.id;
  opts = $el.data('plugin-options') || {};
  opts.initial = [text, id];
  $el.val(id);
  $("#" + ($el.prop('id')) + "_on_deck").trigger('added', [
    id, {
      label: text
    }
  ]);
  return JSON.stringify(opts);
};

clirecUploadUtils.getModalActionUrl = function(action) {
  return clirecUtilUrls.clirecReconsActionUrl.replace('XXXXXX', action);
};

clirecUploadUtils.parseUploadText = function(uploadedText) {
  var NostroNoMatchError, checkNostro, correctData, dr_cr, e, extractSwiftFlex, isValidClirec, malformedData, nostroNameInText, nostroNumberInText, nostroOk, swift_flex;
  NostroNoMatchError = (function(_super) {
    __extends(NostroNoMatchError, _super);

    function NostroNoMatchError(message) {
      this.message = message;
      this.name = 'NostroNoMatchError';
    }

    return NostroNoMatchError;

  })(Error);
  extractSwiftFlex = function(rowContent) {
    var k, matches, obj;
    matches = {
      CREDIT_SWIFT: {
        pattern: /CREDIT.+(?:SWIFT|STATEMENT)/i,
        swift_flex: 'S',
        dr_cr: 'C'
      },
      CREDIT_FLEX: {
        pattern: /CREDIT.+(?:FLEXCUBE|LEDGER)/i,
        swift_flex: 'F',
        dr_cr: 'C'
      },
      DEBIT_SWIFT: {
        pattern: /DEBIT.+(?:SWIFT|STATEMENT)/i,
        swift_flex: 'S',
        dr_cr: 'D'
      },
      DEBIT_FLEX: {
        pattern: /DEBIT.+(?:FLEXCUBE|LEDGER)/i,
        swift_flex: 'F',
        dr_cr: 'D'
      }
    };
    for (k in matches) {
      obj = matches[k];
      if (obj.pattern.test(rowContent)) {
        return [obj.swift_flex, obj.dr_cr];
      }
    }
    return [null, null];
  };
  isValidClirec = function(row) {
    return row.length >= 5 && /^[A-Za-z]{3}\s+\d{2},\s+\d{4}$/.test(row[0]) && /^[A-Za-z]{3}\s+\d{2},\s+\d{4}$/.test(row[1]) && /^-?\d+$/.test(row[2]) && /^\d{1,3}(:?,\d{3})*(:?\.\d{2})$/.test(row[4]);
  };
  nostroNameInText = null;
  nostroNumberInText = null;
  checkNostro = function(value) {
    var name, number;
    name = /RECONCILIATION OF  (.+) A\/C /.exec(value);
    if (name) {
      nostroNameInText = name[1];
      return new RegExp(name[1]).test(clirecUploadUtils.nostroObj.name);
    }
    number = /STMT A\/C- (.+) AS AT /.exec(value);
    if (number) {
      nostroNumberInText = number[1];
      return new RegExp(number[1]).test(clirecUploadUtils.nostroObj.number);
    }
    return false;
  };
  malformedData = [];
  correctData = [];
  swift_flex = null;
  dr_cr = null;
  nostroOk = false;
  try {
    $.parse(uploadedText, {
      header: false,
      delimiter: "\t",
      dynamicTyping: false,
      step: function(data) {
        var errors, pData, results, rowx, x, _ref;
        results = data.results, errors = data.errors;
        if (!errors.length && results[0]) {
          rowx = (function() {
            var _i, _len, _ref, _results;
            _ref = results[0];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              if (x) {
                _results.push(kanmii.strip(x));
              }
            }
            return _results;
          })();
          if (!(rowx.length > 0)) {
            return;
          }
          if (!nostroOk) {
            nostroOk = checkNostro(rowx[0]);
          }
          if (rowx.length === 1 && /(?:DEBIT)|(?:CREDIT)/i.test(rowx[0])) {
            _ref = extractSwiftFlex(rowx[0]), swift_flex = _ref[0], dr_cr = _ref[1];
          }
          if (isValidClirec(rowx)) {
            if (!nostroOk) {
              throw new NostroNoMatchError('Invalid Nostro');
            }
            if (!(swift_flex && dr_cr)) {
              return console.log('swift_flex not set @ = ', rowx);
            } else {
              pData = new clirecUploadUtils.ParseData(rowx.slice(0, 5));
              if (!pData.error) {
                pData.data.nostro = clirecUploadUtils.nostroObj.id;
                pData.data.swift_flex = swift_flex;
                pData.data.dr_cr = dr_cr;
                pData.data.check_unique = 'check_unique';
                return correctData.push(pData.data);
              } else {
                return malformedData.push(rowx);
              }
            }
          }
        }
      }
    });
  } catch (_error) {
    e = _error;
    if (e.name === 'NostroNoMatchError') {
      return [e, [nostroNameInText, nostroNumberInText]];
    } else {
      throw e;
    }
  }
  return [malformedData, correctData];
};

clirecUploadUtils.setNostroObj = function(nostroId) {
  clirecUploadUtils.nostroObj = {};
  return $.ajax({
    url: "/adhoc-models/nostro-acct/" + nostroId + "/",
    async: false,
    success: function(resp) {
      clirecUploadUtils.nostroObj.ccy = resp.ccy;
      clirecUploadUtils.nostroObj.ledger_acct = resp.ledger_acct;
      clirecUploadUtils.nostroObj.name = resp.name;
      clirecUploadUtils.nostroObj.number = resp.number;
      clirecUploadUtils.nostroObj.id = resp.id;
      return clirecUploadUtils.nostroObj.defaultMemoAcct = $('#default-memos').data('memos')[resp.ccy];
    },
    error: function(resp) {
      window.alert('Can not retrieve nostro details.\nServer Error.\nCheck console for details');
      return console.log(resp);
    }
  });
};
