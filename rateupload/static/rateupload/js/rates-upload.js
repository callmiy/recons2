// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(function() {
  var $downloadBtn, $formatOne, $label, $submitBtn, ProcessFormatOne, processErr, rateDataTabs, removeLeadNonDigits;
  $formatOne = $('#id_format1');
  $submitBtn = $('input[type=submit]');
  $downloadBtn = $('.download-btn');
  $label = $('label');
  rateDataTabs = function($rateData) {
    var tabVal;
    if ($rateData.length !== 0) {
      tabVal = 1;
      $rateData.each(function(index, el) {
        $(el).attr('tabindex', tabVal++);
      });
    }
    $rateData.focus(function() {
      return kanmii.selectText(this);
    });
    $rateData.click(function() {
      return kanmii.selectText(this);
    });
    return $rateData.eq(0).focus();
  };
  rateDataTabs($('.rate-data'));
  removeLeadNonDigits = function(rateText) {
    rateText = rateText.trim();
    if ((!/^\d/.test(rateText)) && /\d/.test(rateText)) {
      return rateText.slice(/\d/.exec(rateText).index);
    }
    return rateText;
  };
  ProcessFormatOne = (function() {
    function ProcessFormatOne(rateText) {
      this.rateText = rateText;
      this.calculate = __bind(this.calculate, this);
      this.validate = __bind(this.validate, this);
      this.rateList = this.rateText.split(/\n|\r|\n\r|\r\n/);
      this.CCY_RE = /\(([a-z]{3})1\/([a-z]{3})\)$/i;
    }

    ProcessFormatOne.prototype.validate = function() {
      var NUMBER_RE, index, matches, rate, _i, _j, _len, _len1, _ref, _ref1;
      NUMBER_RE = /^[0-9]+(?:\.[0-9]+)?$/;
      matches = [];
      _ref = this.rateList.slice(0, 2);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rate = _ref[_i];
        matches.push(NUMBER_RE.test(rate));
      }
      _ref1 = this.rateList.slice(2);
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        rate = _ref1[index];
        matches.push(index % 2 === 0 ? this.CCY_RE.test(rate) : NUMBER_RE.test(rate));
      }
      return kanmii.all(matches);
    };

    ProcessFormatOne.prototype.calculate = function() {
      var den, el, index, num, rateObj, rateVal, _i, _len, _ref, _ref1;
      rateObj = {};
      rateObj.NGN = (kanmii.sum(this.rateList.slice(0, 2)) / 2.0).toFixed(7);
      _ref = this.rateList.slice(2);
      for (index = _i = 0, _len = _ref.length; _i < _len; index = _i += 2) {
        el = _ref[index];
        _ref1 = this.CCY_RE.exec(el).slice(1, 3), num = _ref1[0], den = _ref1[1];
        rateVal = this.rateList[index + 3];
        num = num.toUpperCase();
        if (num !== 'USD') {
          rateObj[num] = (+rateVal).toFixed(7);
        }
        if (num === 'USD') {
          rateObj[den.toUpperCase()] = (1.0 / rateVal).toFixed(7);
        }
      }
      return rateObj;
    };

    return ProcessFormatOne;

  })();
  processErr = function(errorText) {
    $('.errorlist').remove();
    return $('<ul></ul>', {
      "class": 'errorlist',
      text: errorText
    }).insertBefore($(this));
  };
  $submitBtn.eq(0).on('click', function(evt) {
    var $tdCcy, $tdRateVal, $tr, ccy, fmt1, formatOneVal, rateObj, rateVal;
    $('.errorlist').remove();
    $('tbody').empty();
    formatOneVal = '';
    $formatOne.val(function(index, currentVal) {
      if (currentVal === '') {
        return currentVal;
      }
      return formatOneVal = removeLeadNonDigits(currentVal);
    });
    if (formatOneVal === '') {
      processErr.call(this, "This field is required!");
      return false;
    }
    fmt1 = new ProcessFormatOne(formatOneVal);
    if (!fmt1.validate()) {
      processErr.call(this, 'The data format is incorrect!');
      return false;
    } else {
      rateObj = fmt1.calculate();
      for (ccy in rateObj) {
        rateVal = rateObj[ccy];
        $tr = $('<tr>');
        $tdCcy = $('<td>', {
          "class": "rate-data ccy",
          text: ccy
        });
        $tdRateVal = $('<td>', {
          "class": "rate-data xchg-rate-val",
          text: rateVal
        });
        $tr.append($tdCcy).append($tdRateVal);
        $('tbody').append($tr);
        rateDataTabs($('.rate-data'));
      }
      return false;
    }
  });
  $submitBtn.eq(1).click(function(evt) {
    var $rateData;
    $rateData = $('.rate-data');
    if ($rateData.length === 0) {
      return evt.preventDefault();
    }
  });
  $label.on('click', function(evt) {
    $label.hide();
    return $formatOne[0].focus();
  });
  return $formatOne.on({
    'focusin': function(evt) {
      return $label.hide();
    },
    'focusout': function(evt) {
      if (!$formatOne.val()) {
        return $label.show();
      }
    }
  });
});
