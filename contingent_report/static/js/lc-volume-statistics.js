// Generated by CoffeeScript 1.6.3
$.fn.insertAt = function(el, nextPos) {
  var $c, c, children, _i, _len;
  children = this.children();
  this.append(el);
  if (!children.length) {
    this;
  }
  for (_i = 0, _len = children.length; _i < _len; _i++) {
    c = children[_i];
    $c = $(c);
    if ((Number(nextPos)) < (Number($c.data('pos')))) {
      $c.before(this.children().last());
    }
  }
  return this;
};

$(function() {
  'use strict';
  var $available, $selected, AVAILABLE_ID, SELECTED_ID, makeOption, makeOptions, removeOption, removeOptions;
  SELECTED_ID = 'selected';
  AVAILABLE_ID = 'available';
  $available = $("#" + AVAILABLE_ID);
  $selected = $("#" + SELECTED_ID);
  makeOption = function(selection, $par, parId, pos) {
    var mon, optionId, yr, _ref;
    optionId = "" + parId + "-" + selection;
    _ref = selection.split('-'), yr = _ref[0], mon = _ref[1];
    if (!$("#" + optionId).length) {
      return $par.insertAt($('<option>', {
        id: optionId,
        text: "" + yr + " - " + mon,
        value: selection,
        'data-pos': pos
      }), pos);
    }
  };
  removeOption = function(selection, parId) {
    var $option;
    $option = $("#" + parId + "-" + selection);
    if ($option.length) {
      return $option.remove();
    }
  };
  makeOptions = function(selectedValues) {
    var selection, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = selectedValues.length; _i < _len; _i++) {
      selection = selectedValues[_i];
      makeOption(selection, $selected, SELECTED_ID, $("#" + AVAILABLE_ID + "-" + selection).data('pos'));
      _results.push(removeOption(selection, AVAILABLE_ID));
    }
    return _results;
  };
  removeOptions = function(selectedValues) {
    var selection, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = selectedValues.length; _i < _len; _i++) {
      selection = selectedValues[_i];
      makeOption(selection, $available, AVAILABLE_ID, $("#" + SELECTED_ID + "-" + selection).data('pos'));
      _results.push(removeOption(selection, SELECTED_ID));
    }
    return _results;
  };
  $('#select-one').click(function(evt) {
    var selectedValues;
    evt.preventDefault();
    selectedValues = $available.val();
    if (selectedValues && selectedValues.length) {
      return makeOptions(selectedValues);
    }
  });
  $('#deselect-one').click(function(evt) {
    var selectedValues;
    evt.preventDefault();
    selectedValues = $selected.val();
    if (selectedValues && selectedValues.length) {
      return removeOptions(selectedValues);
    }
  });
  $('#select-all').click(function(evt) {
    var el;
    evt.preventDefault();
    return makeOptions((function() {
      var _i, _len, _ref, _results;
      _ref = $available.children();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(el.value);
      }
      return _results;
    })());
  });
  $('#deselect-all').click(function(evt) {
    var el;
    evt.preventDefault();
    return removeOptions((function() {
      var _i, _len, _ref, _results;
      _ref = $selected.children();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(el.value);
      }
      return _results;
    })());
  });
  return $('button[type=submit]').click(function(evt) {
    var $selectedOptions, el;
    evt.preventDefault();
    $selectedOptions = $selected.children();
    if ($selectedOptions.length) {
      $('input[name=selected-yrs-mons').val(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = $selectedOptions.length; _i < _len; _i++) {
          el = $selectedOptions[_i];
          _results.push(el.value);
        }
        return _results;
      })()).join(','));
      return $('form').submit();
    } else {
      return alert('No selection made!');
    }
  });
});
