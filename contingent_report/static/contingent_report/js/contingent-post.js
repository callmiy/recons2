// Generated by CoffeeScript 1.6.3
var NUM_TDS_PER_ROW, accts, makePostData;

accts = {
  USD: '89',
  EUR: '90 EUR',
  GBP: '88 GBP'
};

makePostData = function(data) {
  var a, action, amt, b, c, ccy, crAcct, d, drAcct, ref;
  ref = data[0], ccy = data[1], a = data[2], b = data[3], c = data[4], d = data[5], action = data[6], amt = data[7];
  if (Number(amt.replace(/,/g, ''))) {
    if (/DR/.exec(action)) {
      drAcct = "CA50010" + accts[ccy];
      crAcct = "CL60010" + accts[ccy];
    } else {
      drAcct = "CL60010" + accts[ccy];
      crAcct = "CA50010" + accts[ccy];
    }
    return [[drAcct, kanmii.numberFormat(amt), 'DR', 'TRF', "LC ESTB. " + ref], [crAcct, kanmii.numberFormat(amt), 'CR', 'TRF', "LC ESTB. " + ref]];
  }
  return null;
};

NUM_TDS_PER_ROW = 6;

$(function() {
  var $btn, $tbody, $textarea, addRow;
  $textarea = $('textarea');
  $tbody = $('tbody');
  $btn = $('button');
  $textarea.on({
    'focusout blur': function(evt) {
      return $(this).val(function(index, oldVal) {
        if (oldVal) {
          return kanmii.strip(oldVal);
        } else {
          return oldVal;
        }
      });
    }
  });
  addRow = function(dataList) {
    var $tr, index, numRows, val;
    $tr = $('<tr>');
    $tbody.append($tr);
    numRows = $tbody.children().size();
    $tr.append($('<td>', {
      text: numRows
    }), (function() {
      var _i, _len, _results;
      _results = [];
      for (index = _i = 0, _len = dataList.length; _i < _len; index = ++_i) {
        val = dataList[index];
        _results.push($('<td>', {
          text: val,
          'tabindex': (index + 1) + NUM_TDS_PER_ROW * (numRows - 1)
        }));
      }
      return _results;
    })());
    return $tr;
  };
  $btn.eq(1).on({
    'click': function(evt) {
      var val;
      val = kanmii.strip($textarea.val());
      if (val) {
        $tbody.children().remove();
        $.parse(val, {
          delimiter: '\t',
          dynamicTyping: false,
          header: false,
          step: function(output, file, inputElem) {
            var data, postData, _i, _len;
            postData = makePostData(output.results[0].slice(2));
            if (postData) {
              for (_i = 0, _len = postData.length; _i < _len; _i++) {
                data = postData[_i];
                addRow(data);
              }
            }
          }
        });
        return $('td').get(1).focus();
      }
    }
  });
  $btn.first().on({
    'click': function(evt) {
      $textarea.val('');
      return $tbody.children().remove();
    }
  });
  $tbody.on({
    'focusin click': function(evt) {
      var $el;
      $el = $(this);
      this.style.backgroundColor = '#FDE6CD';
      $el.siblings().css('background-color', '#FDE6CD');
      return kanmii.selectText(this);
    },
    'focusout': function(evt) {
      var $el, val;
      $el = $(this);
      this.style.backgroundColor = 'initial';
      $el.siblings().css('background-color', 'initial');
      if ($el.is(':nth-child(3)')) {
        val = kanmii.numberFormat(this.innerText);
        if (val !== null) {
          return $el.text(val);
        }
      }
    },
    'dblclick': function(evt) {
      return $(this).prop('contenteditable', true);
    }
  }, 'td:not(:first-child)');
  return $btn.last().click(function(evt) {
    var result;
    if ($('tbody > tr').size() > 0) {
      result = '`\t\t\t\tBATCH\n' + kanmii.selectText($('table')[0]).toString();
      return saveAs(new Blob([result], {
        type: 'application/xls'
      }), 'posting.txt');
    }
  });
});
